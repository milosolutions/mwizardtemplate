cmake_minimum_required(VERSION 3.9.0 FATAL_ERROR)
if (POLICY CMP0043)
  cmake_policy(SET CMP0043 NEW)
endif ()

# Fix project() setting VERSION parameter
if (POLICY CMP0048)
  cmake_policy(SET CMP0048 NEW)
endif ()

include(version.cmake)

project(%{ProjectName}
  VERSION ${APP_VERSION}
  DESCRIPTION "Milo code DB template file"
  LANGUAGES CXX
)

# This has to be below project() because it calls find_* function
find_package(Qt5 COMPONENTS REQUIRED Core)

## Mark all warnings as errors
if (NOT WIN32)
  add_compile_options(-Werror -fPIC)
endif (NOT WIN32)

## Use concrete C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed
set(CMAKE_AUTOMOC ON)
# Create code from a list of Qt designer ui files
set(CMAKE_AUTOUIC ON)
# Create code for Qt Resource Files
set(CMAKE_AUTORCC ON)

## Defines
add_compile_definitions(QT_USE_QSTRINGBUILDER)

# Enable LTCG (link time optimization)
option (ltcg "Enable LTCG (link time optimization)" OFF)
if (ltcg)
  set_property(TARGET project-lib PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
  set_property(TARGET %{ProjectName} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
  message("Building with LTCG enabled")
endif (ltcg)

# TODO: add deployment code (like we have with qmake)

# Unit tests
#if (CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING)
include(CTest)
add_subdirectory(tests)
enable_testing()
#endif ()

# MCDB modules
# MScripts is indentionally left out - there is no C++ code there

@if "%{mbarcodescannerCheckBox}" == "mbarcodescannerChBChecked"
add_subdirectory(milo/mbarcodescanner)
@endif
@if "%{mchartsCheckBox}" == "mchartsChBChecked"
add_subdirectory(milo/mcharts)
@endif
@if "%{mconfigCheckBox}" == "mconfigChBChecked"
add_subdirectory(milo/mconfig)
@endif
@if "%{mcryptoCheckBox}" == "mcryptoChBChecked"
add_subdirectory(milo/mcrypto)
@endif
@if "%{mlogCheckBox}" == "mlogChBChecked"
add_subdirectory(milo/mlog)
@endif
@if "%{mrestapiCheckBox}" == "mrestapiChBChecked"
add_subdirectory(milo/mrestapi)
@endif
@if "%{msentryCheckBox}" == "msentryChBChecked"
add_subdirectory(milo/msentry)
@endif
@if "%{msshtunnelCheckBox}" == "msshtunnelChBChecked"
add_subdirectory(milo/msshtunnel)
@endif
@if "%{memailsystemCheckBox}" == "memailsystemChBChecked"
add_subdirectory(milo/memailsystem)
@endif
@if "%{mcalendarCheckBox}" == "mcalendarChBChecked"
add_subdirectory(milo/mcalendar)
@endif
@if "%{mdatabaseCheckBox}" == "mdatabaseChBChecked"
add_subdirectory(milo/mdatabase)
@endif

set(SOURCES
  src/main.cpp
  src/utils/tags.h
  src/utils/helpers.h
)

set(RESOURCES
  qml/qml.qrc
  resources/resources.qrc
)

set(OTHER_FILES
  README.md
  Release.md
  AUTHORS.md
  LICENSE-MiloCodeDB.txt
  license-Qt.txt
  %{ProjectName}.doxyfile.in
  .clang-format
  .gitignore
  .gitlab-ci.yml
)

# TODO: add options to enable asan, msan, tsan and ubsan. See .pro file for
# example flags.

# Create LIBRARY with whole application code. It will be used in app executable
# and also in tests

add_library(project-lib ${SOURCES})

target_include_directories(project-lib
  PUBLIC
  $<INSTALL_INTERFACE:include>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
)

# Use LIBRARY in app executable

add_executable(%{ProjectName} src/main.cpp ${OTHER_FILES})

target_link_libraries(project-lib
@if "%{mlogCheckBox}" == "mlogChBChecked"
  mlog
@endif
@if "%{mbarcodescannerCheckBox}" == "mbarcodescannerChBChecked"
  mbarcodescanner
@endif
@if "%{mchartsCheckBox}" == "mchartsChBChecked"
  mcharts
@endif
@if "%{mconfigCheckBox}" == "mconfigChBChecked"
  mconfig
@endif
@if "%{mcryptoCheckBox}" == "mcryptoChBChecked"
  mcrypto
@endif
@if "%{mrestapiCheckBox}" == "mrestapiChBChecked"
  mrestapi
@endif
@if "%{msentryCheckBox}" == "msentryChBChecked"
  msentry
@endif
@if "%{msshtunnelCheckBox}" == "msshtunnelChBChecked"
  msshtunnel
@endif
@if "%{memailsystemCheckBox}" == "memailsystemChBChecked"
  memailsystem
@endif
@if "%{mcalendarCheckBox}" == "mcalendarChBChecked"
  mcalendar
@endif
@if "%{mdatabaseCheckBox}" == "mdatabaseChBChecked"
  mdatabase
@endif
  Qt5::Core
)

target_link_libraries(%{ProjectName}
  project-lib
)

SET(CPACK_GENERATOR "") # DEB;RPM;NSIS
set(CPACK_PACKAGE_VENDOR "${COMPANY_NAME}")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Package description (title)")
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.md")
set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")

## Platforms
#@if "%{WindowsChB}" == "WindowsChBChecked"
#include(platforms/windows/windows.pri)
#@endif
#@if "%{MacChB}" == "MacChBChecked"
#include(platforms/mac/mac.pri)
#@endif
#@if "%{AndroidChB}" == "AndroidChBChecked"
#include(platforms/android/android.pri)
#@endif
@if "%{LinuxChB}" == "LinuxChBChecked"
add_subdirectory(platforms/linux)
@endif

INCLUDE(CPack)
